/**
  *
  * Implement a `map` method on this Tree class.
  *
  * Map accepts a mapping function as its only argument. It traverses the tree,
  * passing each node's value into the mapping function, and generates a new
  * tree containing the results.
  *
  * So `map` should return a tree with the same structure, and different values,
  * but it should NOT modify the tree that was passed in.
  *
  * Example:
  *   var root1 = new Tree(1);
  *   var branch2 = root1.addChild(2);
  *   var branch3 = root1.addChild(3);
  *   var leaf4 = branch2.addChild(4);
  *   var leaf5 = branch2.addChild(5);
  *   var leaf6 = branch3.addChild(6);
  *   var leaf7 = branch3.addChild(7);
  *   var newTree = root1.map(function (value) {
  *     return value * 2;
  *   })
  *  newTree.value // 2
  *  newTree.children[0].value // 4
  *  newTree.children[1].value // 6
  *  newTree.children[0].children[1].value // 10
  *  newTree.children[1].children[1].value // 14
  *  root1.value // still 1
  *
  *
  * Extra credit: Consider another method, `mapInPlace`, which DOES modify
  * the original tree instead of generating a new one. Why would you want to use this
  * method instead of `map`?
  *
  */

/*
 * Basic tree that stores a value.
*/

class Tree {
  constructor(value) {
    this.value = value
    this.children = []
  }

  map(callback) {
    // return a new tree with the same structure as `this`, with values generated by the callback
    const newTree = new Tree(callback(this.value))
    for (var i = 0; i < this.children.length; i++)
      newTree.addChild(this.children[i].map(callback))

    return newTree
  }

  mapInPlace(callback) {
    //update the values of the existing tree with values generated by the callback
    this.value = callback(this.value)
    for (var i = 0; i < this.children.length; i++)
      this.children[i].mapInPlace(callback)
    return this
  }

  addChild(child) {
    if (!child || !(child instanceof Tree)) {
      child = new Tree(child);
    }

    if (!this.isDescendant(child)) {
      this.children.push(child);
    } else {
      throw new Error("That child is already a child of this tree");
    }
    // return the new child node for convenience
    return child;
  }

  isDescendant(child) {
    if (this.children.indexOf(child) !== -1) {
      // `child` is an immediate child of this tree
      return true;
    } else {
      for (var i = 0; i < this.children.length; i++) {
        if (this.children[i].isDescendant(child)) {
          // `child` is descendant of this tree
          return true;
        }
      }
      return false;
    }
  }

  removeChild(child) {
    var index = this.children.indexOf(child);
    if (index !== -1) {
      // remove the child
      this.children.splice(index, 1);
    } else {
      throw new Error("That node is not an immediate child of this tree");
    }
  }
}

var root1 = new Tree(1)
var branch2 = root1.addChild(2);
var branch3 = root1.addChild(3);
var leaf4 = branch2.addChild(4);
var leaf5 = branch2.addChild(5);
var leaf6 = branch3.addChild(6);
var leaf7 = branch3.addChild(7);
var newTree = root1.map(function (value) {
  return value * 2;
})
// console.log(newTree)
// console.log(newTree.value) // 2x
// console.log(newTree.children[0].value) // 4
// console.log(newTree.children[1].value) // 6
// console.log(newTree.children[0].children[1].value) // 10
// console.log(newTree.children[1].children[1].value) // 14
// console.log(root1.value) // still 1

console.log(root1)
console.log(root1.mapInPlace((value) => {
  return value * 2
}))
